{
  "name": "cadence",
  "description": "A Swiss Army asynchronous control flow function for JavaScript.",
  "author": {
    "name": "Alan Gutierrez",
    "email": "alan@prettyrobots.com"
  },
  "version": "0.0.12",
  "keywords": [
    "async",
    "asynchronous",
    "control",
    "flow",
    "loop",
    "micro-js",
    "step",
    "callback"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/bigeasy/cadence/raw/master/LICENSE"
    }
  ],
  "homepage": "http://bigeasy.github.com/cadence",
  "repository": {
    "type": "git",
    "url": "git://github.com/bigeasy/cadence.git"
  },
  "scripts": {
    "test": "proof platform win32 && proof */*/*.t.js || t/test"
  },
  "devDependencies": {
    "proof": "0.0.22",
    "uglify-js": "~1.3"
  },
  "dependencies": {},
  "readme": "# Cadence [![Build Status](https://secure.travis-ci.org/bigeasy/cadence.png?branch=master)](http://travis-ci.org/bigeasy/cadence)\n\nA Swiss Army asynchronous control flow function for JavaScript.\n\n```javascript\nvar cadence = require('cadence'), fs = require('fs');\n\ncadence(function (step) {\n\n  fs.readFile(__filename, 'utf8', step());\n\n}, function (body) {\n\n  console.log(body);\n\n})();\n```\n\nCadence takes a series of functions and runs them in serial. We call the series\nof functions a ***cadence***. We call an individual function in a cadence a\n***step***.\n\nA step can contain a sub-cadence. We can run multiple sub-cadences in parallel.\nWith this, you've got your serial and your parallel, and you mix or match to\ncreate the asynchronous program you want to run.\n\nCadence is a function generator that creates a `step` function that accepts a\nconventional Node.js error, results callback function. You can then use the\ngenerated function anywhere in your code.\n\n```javascript\nvar cadance = require('cadence'), fs = require('fs');\n\nvar deleteIf = cadence(function (step, file, condition) {\n  fs.stat(file, step());\n}, function (step, stat) {\n  if (condition(stat)) fs.unlink(step());\n});\n\nfunction empty (stat) { return stat.size == 0 }\n\ndeleteIf(__filename, empty, function (error) {\n  if (error) console.log(error);\n});\n```\n\nIn the above example we create a function that will asynchronously stat a file,\nthen if a test function passes, it will asynchronously delete the file. We\nassign our cadence to a variable named `deleteIf`. We can now call `deleteIf`\nproviding a standard issue Node.js error reporting callback.\n\nLet's extend our `deleteIf` function. Let's say that if the file doesn't exist,\nwe ignore the error raised when we stat the file. If we pass `Error` to our\n`step` constructor, the next function in an error handler function. The error\nhandler function will be called with the `error` as the first argument if an\nerror is returned. If there is no error, the error handler function is skipped.\n\n```javascript\nvar cadance = require('cadence'), fs = require('fs');\n\nvar deleteIf = cadence(function (step, file, condition) {\n  fs.stat(file, step(Error));\n}, function (error) {\n  if (error.code != \"ENOENT\") throw error;\n  else step(null);\n}, function (step, stat) {\n  if (stat && condition(stat)) fs.unlink(step());\n});\n\nfunction empty (stat) { return stat.size == 0 }\n\ndeleteIf(__filename, empty, function (error) {\n  if (error) console.log(error);\n});\n```\n\nWe test to see if the error is `ENOENT`. If not, we have a real problem, so we\nthrow the error. The cadence stops and the callback is called with error. The\nerror is `ENOENT`, we exit early by calling the step function directly as a\ncallback, passing `null` to indicate no error.\n\n## Working with `EventEmitter`s\n\nHere is a unit test for working with `EventEmitter` illustrating the\n`once` handler.\n\n```javascript\nvar cadence = require('cadence'), event = require('event')\n  , emitter = new event.EventEmitter();\n\ncadence(function (emitter, step) {\n  step(function () {\n    step(emitter).once('end');\n  }, function (end) {\n    assert.equal(end, 'done');\n  });\n})(emitter);\n\nemitter.emit('end', 'done');\n```\n\nWhen you invoke `once` an inverse future is created that collects the\nemitted event value. Cadence will wait until the `once` value is emitted\nbefore continuing to the next step. The value will be assigned to the\ncadence context using the event name as a variable name.\n\nUnlike the `once` handler, the `on` handler does not block the next step\nin the cadence.\n\n```javascript\nvar cadence = require('cadence'), event = require('event')\n  , emitter = new event.EventEmitter();\n\ncadence(function (emitter, step) {\n  step(function () {\n    step(emitter).once('end');\n  }, function (data) {\n    assert.deepEqual(data, [ 1, 2, 3 ]);\n  });\n})(emitter);\n\nemitter.emit('end', 'done');\n```\n\nWhen you invoke `on`, the results will be gathered in an array in the\ncadence context, keyed by the name of the event. The callback will\ngather results until the final callback for the step function is\ninvoked.\n\n**TODO**: Currently there is no support for events that emit more than\none argument. You can +1 [this\nissue](https://github.com/bigeasy/cadence/issues/50) if this is blocking\nyour project.\n\nBelow we use the example of splitting an HTTP server log for many hosts\ninto a log file for each host.\n\n```javascript\nvar cadence = require('cadence'), fs = require('fs');\n\ncadence(function (step) {\n  step(function () {\n    var readable = fs.readableStream(__dirname + '/logins.txt');\n    readable.setEncoding('utf8');\n    step(readable).on('data').once('end');\n  }, function (data) {\n    var hosts = {};\n    data.join('').split(/\\n/).foreach(function (line) {\n      var host = /^([\\w\\d.]+)\\s+(.*)/.exec(line)[1];\n      (hosts[host] || (hosts[host])).push(line);\n    });\n    for (var host in hosts) {\n      var writable = fs.writableStream(__dirname + '/' + host + '.log');\n      writable.end(hosts[host].join('\\n') + '\\n');\n      step(writable).once('drain');\n    }\n  });\n})();\n```\n\n## Change Log\n\nChanges for each release.\n\n### Version 0.0.12\n\nSat Mar 16 05:35:06 UTC 2013\n\n * Propagate `` this ``. #84.\n * Use identity operator in check for early return. #82.\n * Build `` callback `` object in ``` _async ```.\n * Rename `arguments` property to `args`.\n * Move sizes indent from `t/sizes` to `t/test`.\n * More tests for fix-up cadences.\n * Remove `if` statement to test for invoke callback. #66.\n * Fix cadence return values. #76.\n * Fix arity.\n * Remove hidden context. #75.\n * Remove timeouts. #80.\n * Use `Error` to indicate subsequent error handler. #68.\n * Remove wrap option. #78.\n * Remove \"use strict\".\n * Ensure reentrancy. #74.\n * Remove underscore to indicate zero arity. #73.\n\n### Version 0.0.11\n\nTue Mar 12 07:50:52 UTC 2013\n\n *  Make default arity of scalars zero. #71.\n\n### Version 0.0.10\n\nTue Mar 12 05:57:10 UTC 2013\n\n * Drop support for parameter inferred plain callbacks. #70.\n * Implement zero-to-many callback functions. #62.\n * Spell check and tidy prose. #69. #65.\n * Implement arrayed sub-cadences. #64.\n * Implement fix-up cadences. #61.\n * Fix snuggled parameters. #60.\n * Created a design document in `design.markdown`.\n\n### Version 0.0.9\n\nReleased: Sat Mar  9 04:06:57 UTC 2013\n\n * New logic to specify order of parameters to subsequent function. #58.\n\n### Version 0.0.8\n\nReleased: Mon Mar  4 06:56:26 UTC 2013\n\n * Rename `async` function to `step`. #55.\n * Exception when `step` arguments are invalid. #56.\n\n### Version 0.0.7\n\nReleased: Wed Feb 27 00:33:51 UTC 2013\n\n * Step over to stop out of `async`. #47.\n * Add `.js` suffix to test file names. #54.\n * Update `t/sizes` and `t/test` to work with a POSIX shell.\n * Return `cadence` function directly instead of factory function. #49.\n * Moved `build` directory contents to `t`. #51.\n * Rename inner `cadence` function to `async`. #52.\n * Consume events from event emitters. #48.\n * An `` _ `` underbar as a step function name means to disable argument\n   inference. #46. #25\n\n### Version 0.0.6\n\nReleased: Fri Jul 13 16:27:39 UTC 2012\n\n * Flatten arguments to inner `cadence` unless first arg is null. #44.\n\n### Version 0.0.5\n\nReleased: Fri Jul 13 15:25:00 UTC 2012\n\n * Do not flatten arguments to `async`. #43.\n * Upgrade to Proof 0.0.14. #42.\n * Build on Windows. #41.\n\n### Version 0.0.4\n\nReleased: Wed Jul 11 21:56:29 UTC 2012\n\n * No inference when there are no arguments. #40.\n\n### Version 0.0.3\n\nReleased: Wed Jul 11 00:54:38 UTC 2012\n\n * Set context after uncaught error. #39.\n\n### Version 0.0.2\n\nReleased: Sun Jul  8 05:48:38 UTC 2012\n\n * Remove object merge with cadence context. #38.\n\n### Version 0.0.1\n\nReleased: Sun Jul  8 04:28:52 UTC 2012\n\n * Test case for Proof set context. #35.\n * Variadic and external arguments. #34. #31.\n * Store ephemeral variables outside of cadence context. #33.\n * Pass parameters in from external function. #23.\n * Create change log. #32.\n * Return values to application. #14.\n * Early exit. #30.\n * Plain old callbacks. #29.\n * Immediate context assignment within step function. #28.\n * Application specified base context. #27.\n * Application specified alias for `cadence`. #16.\n * Error-only error handling step functions. #26.\n * Handle errors from parallel asynchronous calls. #8.\n * Branching. #24. #2.\n * Add Travis CI chicklet to `README.md`. #11.\n * Track minified size in Travis CI builds. #22. #21.\n * Parallel sub-cadences. #19.\n * Cadence context as stack. #4.\n * Application specified step function wrappers. #3.\n * Fix `README.md` examples. #9.\n * Build a Node.js style asynchronous function. #13.\n * Catch-all exception handling. #1&. #12.\n * Rename test directories. #15.\n * Gather results from parallel executions. #10.\n * Infer context names from step function argument names. #7.\n\n### Version 0.0.0\n\nReleased: Tue Jul  3 19:17:38 UTC 2012\n\n * Build on Travis CI. #5.\n * Extract Cadence from Proof. #6.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bigeasy/cadence/issues"
  },
  "_id": "cadence@0.0.12",
  "dist": {
    "shasum": "63235be921ae7938eb17e99267d0c94d1cbaaf95"
  },
  "_from": "cadence@0.0.12",
  "_resolved": "https://registry.npmjs.org/cadence/-/cadence-0.0.12.tgz"
}
